name: deploy bluegreen
on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  server_setup:
    outputs:
      active_port: ${{ steps.identify.outputs.active }}
      target_port: ${{ steps.identify.outputs.target }}
    runs-on: self-hosted
    steps:

      - name: download ansible
        run: sudo yum install ansible -y

      - name: setup localhost in ansible
        run: |
          echo "$(hostname -i) ansible_connection=local" | sudo tee /etc/ansible/hosts

      
      - name: checkout repo
        uses: actions/checkout@v4
 

      - name: run play
        run: |
          cd /home/ec2-user/actions-runner/_work/todoApp_backend/todoApp_backend
          sudo ansible-playbook bluegreen_play.yml
          sleep 10
          
      - name: identify active port and start container
        id: identify
        run: |
          active=$(sudo grep "808[12]" /etc/nginx/conf.d/app.conf | cut -d: -f2 | tr -d ";")
          if [[ "$active" = "8081" ]];then 
            target="8082"
          else
            target="8081"
          fi

          sudo docker pull sri1800/todo_app:latest
          sudo docker run -d --name web_app_$target --env-file ./var.env -p $target:8081 sri1800/todo_app:latest  
          echo "active=$active" >> $GITHUB_OUTPUT
          echo "target=$target" >> $GITHUB_OUTPUT
          sleep 20

          echo "approve port switch"

  get_approval:
    needs: server_setup
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:

      - name: approve
        run: echo "approved port switch"
        



  nginx_reload:
    needs: get_approval
    runs-on: self-hosted
    steps:
      
      - name: debug outputs
        run: |
          echo "Active port: ${{ needs.server_setup.outputs.active_port }}"
          echo "Target port: ${{ needs.server_setup.outputs.target_port }}"


      - name: port edit
        run: |
          ACTIVE_PORT="${{ needs.server_setup.outputs.active_port }}"
          TARGET_PORT="${{ needs.server_setup.outputs.target_port }}"
          echo "ACTIVE_PORT=$ACTIVE_PORT, TARGET_PORT=$TARGET_PORT"
          sudo sed -i "s/$ACTIVE_PORT/$TARGET_PORT/g" /etc/nginx/conf.d/app.conf
          sudo service nginx reload
          echo " serving on new port "

  curltest:
    outputs:
      result: ${{ steps.test.outputs.result }}
    needs: nginx_reload
    runs-on: ubuntu-latest

    steps:
      - name: curltest
        id: test
        run: |
          result=$(curl -o /dev/null -s -w "%{http_code}\n" http://13.126.0.146/login)

          echo "result=$result" >> GITHUB_OUTPUT

        

  killcontainer:
    needs: curltest
    runs-on: self-hosted
    steps:

      - name: revert or decom
        run: |
          RESULT="${{ needs.curltest.outputs.result }}"
          ACTIVE_PORT="${{ needs.server_setup.outputs.active_port }}"
          TARGET_PORT="${{ needs.server_setup.outputs.target_port }}"

          if [[ "$RESULT" != "404" ]]; then
            sudo docker stop web_app_$ACTIVE_PORT 
            sudo docker rm web_app_$ACTIVE_PORT
          else

            sudo docker stop web_app_$TARGET_PORT
            sudo docker rm web_app_$TARGET_PORT
            echo "killed faulty container reverting nginx to old"
            sudo sed -i "s/$TARGET_PORT/$ACTIVE_PORT/g" /etc/nginx/conf.d/app.conf
            sudo service nginx reload
            echo " serving on old port "
          fi


  


